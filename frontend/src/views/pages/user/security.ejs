<!DOCTYPE html>
<html lang="en">

<head>
  <%- include("../../components/head.ejs") %>
  <script src="/js/user.js"></script>
  <title>GradeAnalyzer | Security</title>
</head>

<body>
  <%- include("../../components/sidebar.ejs") %>

  <main class="sm:ml-64 p-6">
    <h1 class="text-2xl font-semibold mb-6">Security Records</h1>

    <div class="bg-background-50 shadow-md rounded-lg p-6 overflow-x-auto">
      <table class="min-w-full">
        <thead>
          <tr class="bg-gray-100 border-b">
            <th class="px-4 py-2 text-left text-sm font-medium text-gray-600">Type</th>
            <th class="px-4 py-2 text-left text-sm font-medium text-gray-600">Time</th>
            <th class="px-4 py-2 text-left text-sm font-medium text-gray-600">IP Address</th>
            <th class="px-4 py-2 text-left text-sm font-medium text-gray-600">Device Info</th>
          </tr>
        </thead>
        <tbody id="security-records">
          <tr class="border-b">
            <td class="px-4 py-2 text-left text-sm text-gray-600" colspan="4">You have no security records</td>
          </tr>
        </tbody>
      </table>
    </div>

    <!-- Pagination Controls -->
    <div class="mt-4 flex justify-between items-center">
      <span class="text-sm text-gray-600">Showing <span id="start">0</span> to <span id="end">0</span> of max 100 records</span>
      <div>
        <button id="prev" class="bg-primary-500 text-white px-3 py-1 rounded hover:bg-primary-400 transition-colors duration-200">Previous</button>
        <button id="next" class="bg-primary-500 text-white px-3 py-1 rounded hover:bg-primary-400 transition-colors duration-200">Next</button>
      </div>
    </div>
  </main>

  <script>
    const user = new User(app);

    let page = 1; // Current page number

    // Function to fetch security records
    const getSecurityRecords = async (offset = 0) => {
      const response = await user.getSafetyRecords(10, offset);
      if (response.status === "success") {
        // Adjust page if no records are returned
        if (page > 1 && response.data.length === 0) {
          page--;
          return;
        }

        // Clear existing records
        const securityRecords = document.getElementById("security-records");
        securityRecords.innerHTML = "";

        // Populate the table with new records
        response.data.forEach((record) => {
          const tr = document.createElement("tr");
          tr.classList.add("border-b");

          // Create and append cells for each record property
          const type = document.createElement("td");
          type.classList.add("px-4", "py-2");
          type.textContent = record.type;
          tr.appendChild(type);

          const time = document.createElement("td");
          time.classList.add("px-4", "py-2");
          time.textContent = new Date(record.date).toLocaleString();
          tr.appendChild(time);

          const ip = document.createElement("td");
          ip.classList.add("px-4", "py-2");
          ip.textContent = record.ip;
          tr.appendChild(ip);

          const device = document.createElement("td");
          device.classList.add("px-4", "py-2");
          device.textContent = record.device;
          tr.appendChild(device);

          securityRecords.appendChild(tr);
        });

        // Update pagination display
        document.getElementById("start").textContent = offset + 1;
        document.getElementById("end").textContent = offset + response.data.length;
      }
    };

    // Previous button event listener
    const prevButton = document.getElementById("prev");
    prevButton.addEventListener("click", async () => {
      if (page > 1) {
        page--;
        getSecurityRecords((page - 1) * 10);
      }
    });

    // Next button event listener
    const nextButton = document.getElementById("next");
    nextButton.addEventListener("click", async () => {
      page++;
      getSecurityRecords((page - 1) * 10);
    });

    // Initial fetch of security records
    getSecurityRecords();
  </script>
</body>

</html>